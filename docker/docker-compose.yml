networks:
  backend:
    driver: ${NETWORKS_DRIVER}
  fronted:
    driver: ${NETWORKS_DRIVER}
volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  sonarqube:
    driver: ${VOLUMES_DRIVER}

services:
  #######################################################################################
  # PROXY SERVER TRAEFIK
  #######################################################################################

  traefik:
    build:
      context: ./traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/data:/data
    command:
      # log
      - "--log.level=debug"
      # api
      - "--api"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # providers
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.websecure.address=:${TRAEFIK_WEBSECURE_PORT}"
      - "--entrypoints.traefik.address=:${TRAEFIK_DASHBOARD_PORT}"
      - "--entrypoints.postgres.address=:${TRAEFIK_DATABASE_PORT}"
      - "--entrypoints.web.address=:${TRAEFIK_WEB_PORT}"
      - "--entrypoints.redis.address=:${TRAEFIK_REDIS_PORT}"
      # middleware
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      # tls
      - "--entrypoints.websecure.http.tls.domains[0].main=${APP_DOMAIN_NAME}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${APP_DOMAIN_NAME}"
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.resolvers=${TRAEFIK_CLOUDFLARE_DNS}"
      # accesslog
      - "--accesslog.filepath=/data/access.log"
    ports:
      - "${TRAEFIK_WEB_PORT}:${TRAEFIK_WEB_PORT}"
      - "${TRAEFIK_REDIS_PORT}:${TRAEFIK_REDIS_PORT}"
      - "${TRAEFIK_DATABASE_PORT}:${TRAEFIK_DATABASE_PORT}"
      - "${TRAEFIK_WEBSECURE_PORT}:${TRAEFIK_WEBSECURE_PORT}"
      - "${TRAEFIK_DASHBOARD_PORT}:${TRAEFIK_DASHBOARD_PORT}"
    environment:
      - CF_API_EMAIL=${TRAEFIK_CLOUDFLARE_EMAIL}
      - CF_API_KEY=${TRAEFIK_CLOUDFLARE_API_KEY}
    networks:
      - backend
      - fronted
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${APP_ENV_TYPE}-traefik.${APP_DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=${TRAEFIK_DASHBOARD_PORT}"
      - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
      - "traefik.http.middlewares.access-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}"
      - "traefik.http.routers.traefik.middlewares=access-auth"

  #######################################################################################
  # WORKSPACE
  #######################################################################################

  workspace:
    build:
      context: ./workspace
      args:
        - BASE_IMAGE_TAG_PREFIX=${WORKSPACE_BASE_IMAGE_TAG_PREFIX}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
        - XDEBUG_PORT=${WORKSPACE_XDEBUG_PORT}
        - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
        - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
        - INSTALL_XSL=${WORKSPACE_INSTALL_XSL}
        - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
        - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
        - COMPOSER_VERSION=${WORKSPACE_COMPOSER_VERSION}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
        - TZ=${WORKSPACE_TIMEZONE}
        - INSTALL_PHPDECIMAL=${WORKSPACE_INSTALL_PHPDECIMAL}
        - INSTALL_MEMCACHED=${WORKSPACE_INSTALL_MEMCACHED}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${BACKEND_APP_CODE_PATH_HOST}:${BACKEND_APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - CHOKIDAR_USEPOLLING=true
    networks:
      - backend

  #######################################################################################
  # PHP-FPM SERVERS
  #######################################################################################

  php-fpm:
    build:
      context: ./php-fpm
      args:
        - BASE_IMAGE_TAG_PREFIX=${PHP_FPM_BASE_IMAGE_TAG_PREFIX}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - INSTALL_BZ2=${PHP_FPM_INSTALL_BZ2}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - XDEBUG_PORT=${PHP_FPM_XDEBUG_PORT}
        - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
        - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
        - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
        - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
        - INSTALL_PING=${PHP_FPM_INSTALL_PING}
        - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
        - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
        - INSTALL_PHPDECIMAL=${PHP_FPM_INSTALL_PHPDECIMAL}
        - PUID=${PHP_FPM_PUID}
        - PGID=${PHP_FPM_PGID}
        - LOCALE=${PHP_FPM_DEFAULT_LOCALE}
        - INSTALL_DNSUTILS=${PHP_FPM_INSTALL_DNSUTILS}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${BACKEND_APP_CODE_PATH_HOST}:${BACKEND_APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    expose:
      - 9000
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - FAKETIME=${PHP_FPM_FAKETIME}
    depends_on:
      - workspace
    networks:
      - backend

  #######################################################################################
  # NGINX SERVER
  #######################################################################################

  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${BACKEND_APP_CODE_PATH_HOST}:${BACKEND_APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    depends_on:
      - php-fpm
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nginx.rule=Host(`${APP_ENV_TYPE}-admin.${APP_DOMAIN_NAME}`)"

  #######################################################################################
  # NEXTJS SERVER
  #######################################################################################

  next:
    build:
      context: ./nextjs
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ${FRONTEND_APP_CODE_PATH_HOST}:${FRONTEND_APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    restart: always
    expose:
      - 3000
    networks:
      - fronted
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.next.entrypoints=websecure"
      - "traefik.http.routers.next.tls.certresolver=letsencrypt"
      - "traefik.http.routers.next.rule=Host(`${APP_ENV_TYPE}-website.${APP_DOMAIN_NAME}`)"
      - "traefik.http.services.next.loadbalancer.server.port=3000"
      - "traefik.http.services.next.loadbalancer.server.scheme=http"

  #######################################################################################
  # DATABASE SERVER
  #######################################################################################

  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.service=postgres"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=${TRAEFIK_DATABASE_PORT}"

  #######################################################################################
  # REDIS SERVERS
  #######################################################################################

  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    command: --requirepass ${REDIS_PASSWORD}
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.redis.service=redis"
      - "traefik.tcp.routers.redis.entryPoints=redis"
      - "traefik.tcp.services.redis.loadbalancer.server.port=${TRAEFIK_REDIS_PORT}"

  #######################################################################################
  # UTILITIES
  #######################################################################################

  memcached:
    build: ./memcached
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    depends_on:
      - php-fpm
    networks:
      - backend

  portainer:
    build:
      context: ./portainer
    volumes:
      - ${DATA_PATH_HOST}/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.rule=Host(`${APP_ENV_TYPE}-portainer.${APP_DOMAIN_NAME}`)"

  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.8.1
    entrypoint: sh -c '
      apk add jq
      ; while ! [ -e /data/acme.json ] || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0 ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --version v2 --watch
      --source /data/acme.json --dest /out
      --post-hook "sh /hook.sh"'
    volumes:
      - ./traefik-certs-dumper/.certs:/out
      - ./traefik-certs-dumper/post_hook.sh:/hook.sh
      - ./traefik/data:/data

